/* Proszę zaimplementować algorytm sortowania szybkiego, 
   wykorzystując wiele wątków a następnie porównać wydajność algorytmu (czas działania) z wersją jednowątkową. 
*/

import java.util.Date;
import java.util.Random;
import java.util.Scanner;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;

class QuickSortSingleThread {

    static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    static int partition(int[] arr, int low, int high) {
        int pivote = arr[high];
        int i = (low - 1);

        for (int j = low; j <= high - 1; j++) {
            if (arr[j] < pivote) {
                i++;
                swap(arr, i, j);
            }
        }
        swap(arr, i + 1, high);
        return (i + 1);
    }

    static void quickSort(int[] arr, int low, int high) {

        if (low < high) {

            int partion_index = partition(arr, low, high);
            quickSort(arr, low, partion_index - 1);
            quickSort(arr, partion_index + 1, high);

        }
    }
}

class QuickSortMultiThread extends RecursiveTask<Integer> {

    int low, high;
    int[] arr;

    synchronized private int partition(int start, int end, int[] arr) {
        int i = start, j = end;

        int pivote = arr[end];

        int t = arr[j];
        arr[j] = arr[pivote];
        arr[pivote] = t;
        j--;

        while (i <= j) {

            if (arr[i] <= arr[end]) {
                i++;
                continue;
            }

            if (arr[j] >= arr[end]) {
                j--;
                continue;
            }

            t = arr[j];
            arr[j] = arr[i];
            arr[i] = t;
            j--;
            i++;
        }
        t = arr[j + 1];
        arr[j + 1] = arr[end];
        arr[end] = t;
        return j + 1;
    }

    public QuickSortMultiThread(int[] arr, int low, int high) {
        this.arr = arr;
        this.low = low;
        this.high = high;
    }

    @Override
    protected Integer compute() {

        if (low >= high) {
            return null;
        }

        int p = partition(low, high, arr);
        QuickSortMultiThread leftThread = new QuickSortMultiThread(arr, low, p - 1);
        QuickSortMultiThread righThread = new QuickSortMultiThread(arr, p + 1, high);

        leftThread.fork();
        righThread.compute();
        leftThread.join();

        return null;
    }

}

public class Main {

    static void printArray(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    static void fillArray(int[] arr) {
        Random rand = new Random();
        for (int i = 0; i < arr.length; i++) {
            arr[i] = rand.nextInt(101);
        }
    }

    private static void test() {
        Date beginDate = null;
        Date endDate = null;
        System.out.println("QuickSort testing...");

        int[] arr1 = new int[10000];
        int[] arr2 = new int[10000];

        fillArray(arr1);
        arr2 = arr1;

        ForkJoinPool pool = ForkJoinPool.commonPool();

        beginDate = new Date();
        pool.invoke(new QuickSortMultiThread(arr1, 0, arr1.length - 1));
        endDate = new Date();
        System.out.print("(Multi Thread) - " + (endDate.getTime() - beginDate.getTime()) + " [ms] ");

        
        beginDate = new Date();
        QuickSortSingleThread.quickSort(arr2, 0, arr2.length - 1);
        endDate = new Date();
        System.out.println("(Single thread) - " + (endDate.getTime() - beginDate.getTime()) + " [ms]");
    }

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        System.out.print("Write number of tests: ");
        int input = sc.nextInt();
        for (int i = 0; i < input; i++) {
            System.out.println("Test #" + (i + 1));
            test();
            Thread.sleep(4000);
            System.gc();
        }
        sc.close();
    }
}

// The output of the test will give us diferent results. Sometimes the multithread method can take more time because of creating new threads.